# Generated by Django 3.1.6 on 2024-06-12 18:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CargueBackOffice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('excel_file', models.FileField(help_text='Archivo excel segun template', upload_to='cargues/', verbose_name='Archivo del cargue')),
                ('month', models.IntegerField(default=1, verbose_name='Mes')),
                ('year', models.IntegerField(default=2022, verbose_name='Año')),
                ('upload_date', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de subida')),
                ('observations', models.TextField(blank=True, default='', verbose_name='Observaciones')),
                ('data_type', models.CharField(blank=True, default='pacientes', max_length=20, verbose_name='Tipo del cargue')),
                ('user', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Cargue excel',
                'verbose_name_plural': 'Cargues excel',
            },
        ),
        migrations.CreateModel(
            name='Ciudad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departamento', models.CharField(choices=[('Amazonas', 'Amazonas'), ('Antioquia', 'Antioquia'), ('Arauca', 'Arauca'), ('Archipiélago de San Andrés, Providencia y Santa Catalina', 'Archipiélago de San Andrés, Providencia y Santa Catalina'), ('Atlántico', 'Atlántico'), ('Bogotá D.C.', 'Bogotá D.C.'), ('Bolívar', 'Bolívar'), ('Boyacá', 'Boyacá'), ('Caldas', 'Caldas'), ('Caquetá', 'Caquetá'), ('Casanare', 'Casanare'), ('Cauca', 'Cauca'), ('Cesar', 'Cesar'), ('Chocó', 'Chocó'), ('Córdoba', 'Córdoba'), ('Cundinamarca', 'Cundinamarca'), ('Guainía', 'Guainía'), ('Guaviare', 'Guaviare'), ('Huila', 'Huila'), ('La Guajira', 'La Guajira'), ('Magdalena', 'Magdalena'), ('Meta', 'Meta'), ('Nariño', 'Nariño'), ('Norte de Santander', 'Norte de Santander'), ('Putumayo', 'Putumayo'), ('Quindío', 'Quindío'), ('Risaralda', 'Risaralda'), ('Santander', 'Santander'), ('Sucre', 'Sucre'), ('Tolima', 'Tolima'), ('Valle del Cauca', 'Valle del Cauca'), ('Vaupés', 'Vaupés'), ('Vichada', 'Vichada')], max_length=100, verbose_name='Departamento')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
            ],
            options={
                'verbose_name': 'Parámetros - Ciudad',
                'verbose_name_plural': 'Parámetros - Ciudades',
                'ordering': ('order', 'nombre'),
            },
        ),
        migrations.CreateModel(
            name='Complicacion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
            ],
            options={
                'verbose_name': 'Parámetros - Complicación',
                'verbose_name_plural': 'Parámetros - Complicaciones',
                'ordering': ('order', 'nombre'),
            },
        ),
        migrations.CreateModel(
            name='Eps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
            ],
            options={
                'verbose_name': 'Parámetros - EPS',
                'verbose_name_plural': 'Parámetros - EPS',
                'ordering': ('order', 'nombre'),
            },
        ),
        migrations.CreateModel(
            name='GrupoEtareo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('edad_inicio', models.PositiveIntegerField(default=0, verbose_name='Edad inicio')),
                ('edad_fin', models.PositiveIntegerField(default=0, verbose_name='Edad fin')),
            ],
            options={
                'verbose_name': 'Parámetros - Grupo etáreo',
                'verbose_name_plural': 'Parámetros - Grupos etáreos',
                'ordering': ('edad_inicio', 'edad_fin'),
            },
        ),
        migrations.CreateModel(
            name='GrupoGestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
                ('ciudades', models.ManyToManyField(blank=True, to='gi.Ciudad', verbose_name='Ciudades')),
            ],
            options={
                'verbose_name': 'Parámetros - Grupo de gestión',
                'verbose_name_plural': 'Parámetros - Grupos de gestión',
                'ordering': ('order', 'nombre'),
            },
        ),
        migrations.CreateModel(
            name='Indicador',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('HTA', 'HTA'), ('DM', 'DM'), ('ERC', 'ERC'), ('Otros', 'Otros')], max_length=100, verbose_name='Tipo')),
                ('nombre', models.CharField(max_length=100, verbose_name='Nombre')),
                ('descripcion', models.TextField(verbose_name='Descripción')),
                ('slug', models.SlugField(default='', unique=True, verbose_name='Slug')),
                ('medida', models.CharField(default='', max_length=100, verbose_name='Medida')),
                ('tendencia', models.BooleanField(default=True, help_text='Check: Valor es positivo si valor actual > meta. No check: Valor es positivo si valor actual < meta.', verbose_name='Tendencia')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
                ('meta', models.FloatField(verbose_name='Meta')),
                ('valor_actual', models.FloatField(default=0, verbose_name='Valor actual')),
            ],
            options={
                'verbose_name': 'Parámetros - Indicador',
                'verbose_name_plural': 'Parámetros - Indicadores',
                'ordering': ('order', 'tipo', 'nombre'),
                'unique_together': {('tipo', 'nombre')},
            },
        ),
        migrations.CreateModel(
            name='Medicacion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(choices=[('IECA', 'IECA'), ('ARA II', 'ARA II'), ('TIAZIDAS', 'TIAZIDAS'), ('Otro', 'Otro'), ('', 'Sin categoría')], max_length=100, unique=True, verbose_name='Nombre')),
                ('categoria', models.CharField(default='', max_length=100, verbose_name='Categoría')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
            ],
            options={
                'verbose_name': 'Parámetros - Medicación',
                'verbose_name_plural': 'Parámetros - Medicaciones',
                'ordering': ('order', 'nombre'),
            },
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombres', models.CharField(default='', max_length=100, verbose_name='Nombres')),
                ('apellidos', models.CharField(default='', max_length=100, verbose_name='Apellidos')),
                ('tipo_documento', models.CharField(choices=[('RC', 'RC'), ('TI', 'TI'), ('CC', 'CC'), ('CE', 'CE'), ('PS', 'PS'), ('MI', 'MI.'), ('AI', 'AI'), ('CD', 'CD'), ('SP', 'SP'), ('PE', 'PE'), ('PPT', 'PPT'), ('No se cargo tipo de documento', 'No se cargo tipo de documento')], default='', max_length=100, verbose_name='Tipo de identificación')),
                ('numero_documento', models.CharField(default='', max_length=100, verbose_name='Número de documento')),
                ('fecha_nacimiento', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha de nacimiento')),
                ('genero', models.CharField(choices=[('Masculino', 'Masculino'), ('Femenino', 'Femenino'), ('No se cargo género', 'No se cargo género')], default='', max_length=100, verbose_name='Género')),
                ('grupo_etnico', models.CharField(choices=[('Indigena', 'Indigena'), ('ROM (gitano)', 'ROM (gitano)'), ('Raizal del archipiélago de San Andrés y Providencia', 'Raizal del archipiélago de San Andrés y Providencia'), ('Palenquero de San Basilio', 'Palenquero de San Basilio'), ('Negro(a), mulato(a), afro colombiano(a) o afro descendiente', 'Negro(a), mulato(a), afro colombiano(a) o afro descendiente'), ('Ninguna de las anteriores', 'Ninguna de las anteriores'), ('No se cargo grupo etnico', 'No se cargo grupo etnico')], default='', max_length=100, verbose_name='Grupo étnico')),
                ('estado_civil', models.CharField(choices=[('Soltero', 'Soltero'), ('Casado', 'Casado'), ('Unión libre', 'Unión libre'), ('Viudo', 'Viudo'), ('No se cargo estado civil', 'No se cargo estado civil')], default='', max_length=100, verbose_name='Estado civil')),
                ('nivel_estudios', models.CharField(choices=[('Primaria', 'Primaria'), ('Bachiller', 'Bachiller'), ('Técnico/Tecnólogo', 'Técnico/Tecnólogo'), ('Universitario', 'Universitario'), ('Posgrado', 'Posgrado'), ('No se cargo nivel de estudio', 'No se cargo nivel de estudio')], default='', max_length=100, verbose_name='Nivel de estudios')),
                ('estrato', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6')], default='', max_length=100, verbose_name='Estrato')),
                ('direccion', models.CharField(default='', max_length=300, verbose_name='Dirección')),
                ('barrio', models.CharField(default='', max_length=100, verbose_name='Barrio')),
                ('telefono', models.CharField(default='', max_length=100, verbose_name='Teléfono')),
                ('telefono_emergencia', models.CharField(default='', max_length=100, verbose_name='Teléfono contacto de emergencia')),
                ('fecha_afiliacion', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha de afiliación')),
                ('tipo_diabetes', models.CharField(choices=[('No tiene DM', 'No tiene DM'), ('Diabetes tipo I', 'Diabetes tipo I'), ('Diabetes tipo II', 'Diabetes tipo II'), ('Otros (Posquirúrgica, postrasplante, secundaria a medicamentos, MODY)', 'Otros (Posquirúrgica, postrasplante, secundaria a medicamentos, MODY)'), ('No se cargo el tipo de diabetes', 'No se cargo el tipo de diabetes')], max_length=100, verbose_name='Tipo de diabetes')),
                ('fecha_diagnostico', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha diagnóstico')),
                ('fecha_diagnostico_hipertension_renal', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha diagnóstico hipertensión renal')),
                ('diagnostico_hta', models.BooleanField(default=False, verbose_name='Diagnóstico - HTA')),
                ('diagnostico_erc', models.BooleanField(default=False, verbose_name='Diagnóstico - ERC')),
                ('etiologia_erc', models.CharField(blank=True, choices=[('Enfermedad poliquística renal', 'Enfermedad poliquística renal'), ('Otras', 'Otras'), ('Desconocida o paciente en abandono (solo aplica para pacientes con ERC confirmada)', 'Desconocida o paciente en abandono (solo aplica para pacientes con ERC confirmada)'), ('Diabetes.', 'Diabetes.'), ('Enfermedad vascular renal (incluye Nefroangioesclerosis por hipertensión arterial).', 'Enfermedad vascular renal (incluye Nefroangioesclerosis por hipertensión arterial).'), ('Sospecha de glomerulonefritis sin biopsia renal.', 'Sospecha de glomerulonefritis sin biopsia renal.'), ('Glomeruloesclerosis focal y segmentaria.', 'Glomeruloesclerosis focal y segmentaria.'), ('Nefropatía membranosa', 'Nefropatía membranosa'), ('Nefropatía por IgA', 'Nefropatía por IgA'), ('Vasculitis', 'Vasculitis'), ('Lupus eritematoso sistémico.', 'Lupus eritematoso sistémico.'), ('Glomerulopatía familiar o genética (incluye Alport).', 'Glomerulopatía familiar o genética (incluye Alport).'), ('Otra glomerulonefritis.', 'Otra glomerulonefritis.'), ('Síndrome hemolítico urémico.', 'Síndrome hemolítico urémico.'), ('Nefropatía tóxica (incluye analgésicos).', 'Nefropatía tóxica (incluye analgésicos).'), ('Nefritis intersticial.', 'Nefritis intersticial.'), ('Paraproteinemia (incluye mieloma múltiple).', 'Paraproteinemia (incluye mieloma múltiple).'), ('Nefropatía postparto.', 'Nefropatía postparto.'), ('Litiasis.', 'Litiasis.'), ('Displasia o hipoplasia renal congénita.', 'Displasia o hipoplasia renal congénita.'), ('Perdida de unidad renal por trauma o cirugía.', 'Perdida de unidad renal por trauma o cirugía.'), ('Carcinoma renal.', 'Carcinoma renal.'), ('Nefropatía por reflujo vesicoureteral.', 'Nefropatía por reflujo vesicoureteral.'), ('Obstrucción de cuello de la vejiga (Incluye HPB, cáncer de próstata, valvas, etc.),', 'Obstrucción de cuello de la vejiga (Incluye HPB, cáncer de próstata, valvas, etc.),'), ('Nefropatía obstructiva de causa diferente a 27 (incluye cáncer de cuello uterino, tumores retroperitoneales, etc.)', 'Nefropatía obstructiva de causa diferente a 27 (incluye cáncer de cuello uterino, tumores retroperitoneales, etc.)'), ('No aplica, no tiene ERC', 'No aplica, no tiene ERC'), ('No aplica, paciente reportado por ente territorial por prestación de servicios no incluidos en el plan de beneficios', 'No aplica, paciente reportado por ente territorial por prestación de servicios no incluidos en el plan de beneficios')], default='', max_length=200, verbose_name='Etiologia de la Erc')),
                ('fecha_erc', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha Erc')),
                ('estadio_erc', models.CharField(blank=True, choices=[('1', 'Paciente con TFGe mayor o igual a 90 ml/min Normal o elevado'), ('2', 'Paciente con TFGe entre 60 y menor de 89 ml/min Levemente disminuido'), ('3a', 'Paciente con TFGe entre 45 y menor de 59 ml/min Leve a moderadamente disminuido'), ('3b', 'Paciente con TFGe entre 30 y menor de 44 ml/min Moderada a severamente disminuido'), ('4', 'Paciente con TFGe entre 15 y menor de 29 ml/min Severamente disminuido'), ('5', 'Paciente con TFGe menor de 15 ml/min Fallo renal'), ('0', 'Estadio sin calcular')], default='', max_length=200, verbose_name='Estadio ERC')),
                ('diagnostico_epoc', models.BooleanField(default=False, verbose_name='Diagnóstico - EPOC')),
                ('diagnostico_hipoglicemia', models.BooleanField(default=False, verbose_name='Diagnóstico - Hipoglicemia')),
                ('diagnostico_falla_cardiaca', models.BooleanField(default=False, verbose_name='Diagnóstico - Falla cardíaca')),
                ('colesterol_total', models.FloatField(default=0, verbose_name='Colesterol total')),
                ('fecha_colesterol', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha Colesterol')),
                ('hdl', models.FloatField(default=0, verbose_name='Lipoproteína de alta densidad(hdl)')),
                ('tas', models.FloatField(default=0, verbose_name='Tensión arterial sistólica(tas)')),
                ('tad', models.FloatField(default=75, verbose_name='tensión arterial diastólica(tad)')),
                ('es_fumador', models.BooleanField(default=False, verbose_name='¿Es fumador?')),
                ('nivel_riesgo_rcv', models.CharField(choices=[('Bajo', 'Bajo'), ('Moderado', 'Moderado'), ('Alto', 'Alto'), ('Muy alto', 'Muy alto')], default='', editable=False, max_length=100, verbose_name='Nivel de riesgo RCV')),
                ('estatura', models.FloatField(default=0, verbose_name='Estatura')),
                ('peso', models.FloatField(default=0, verbose_name='Peso')),
                ('estadio', models.CharField(blank=True, choices=[('Sin calcular', 'Sin calcular'), ('Estadio 1', 'Estadio 1'), ('Estadio 2', 'Estadio 2'), ('Estadio 3a', 'Estadio 3a'), ('Estadio 3b', 'Estadio 3b'), ('Estadio 4', 'Estadio 4'), ('Estadio 5', 'Estadio 5')], default='', editable=False, max_length=100, verbose_name='Estadio')),
                ('programa_nefroproteccion', models.CharField(blank=True, default='', max_length=100, verbose_name='Programa de nefroprotección')),
                ('riesgo_cardiovascular', models.FloatField(default=0, editable=False, null=True, verbose_name='Riesgo Cardiovascular')),
                ('tfg', models.FloatField(default=0, editable=False, null=True, verbose_name='TFG')),
                ('ultimo_seguimiento', models.DateField(default=django.utils.timezone.now, editable=False, verbose_name='Último seguimiento')),
                ('hba1c', models.FloatField(default=0.0, editable=False, verbose_name='Hemoglobina glicosilada (Último registro)')),
                ('diagnostico', models.CharField(blank=True, choices=[('E10', 'DIABETES MELLITUS INSULINODEPENDIENTE'), ('E100', 'DIABETES MELLITUS INSULINODEPENDIENTE CON COMA'), ('E101', 'DIABETES MELLITUS INSULINODEPENDIENTE CON CETOACIDOSIS'), ('E102', 'DIABETES MELLITUS INSULINODEPENDIENTE CON COMPLICACIONES RENALES'), ('E103', 'DIABETES MELLITUS INSULINODEPENDIENTE CON COMPLICACIONES OFTALMICAS'), ('E104', 'DIABETES MELLITUS INSULINODEPENDIENTE CON COMPLICACIONES NEUROLOGICAS'), ('E105', 'DIABETES MELLITUS INSULINODEPENDIENTE CON COMPLICACIONES CIRCULATORIAS PERIFERICAS'), ('E106', 'DIABETES MELLITUS INSULINODEPENDIENTE CON OTRAS COMPLICACIONES ESPECIFICADAS'), ('E107', 'DIABETES MELLITUS INSULINODEPENDIENTE CON COMPLICACIONES MULTIPLES'), ('E108', 'DIABETES MELLITUS INSULINODEPENDIENTE CON COMPLICACIONES NO ESPECIFICADAS'), ('E109', 'DIABETES MELLITUS INSULINODEPENDIENTE SIN MENCION DE COMPLICACION'), ('E11', 'DIABETES MELLITUS NO INSULINODEPENDIENTE'), ('E110', 'DIABETES MELLITUS NO INSULINODEPENDIENTE CON COMA'), ('E111', 'DIABETES MELLITUS NO INSULINODEPENDIENTE CON CETOACIDOSIS'), ('E112', 'DIABETES MELLITUS NO INSULINODEPENDIENTE CON COMPLICACIONES RENALES'), ('E113', 'DIABETES MELLITUS NO INSULINODEPENDIENTE CON COMPLICACIONES OFTALMICAS'), ('E114', 'DIABETES MELLITUS NO INSULINODEPENDIENTE CON COMPLICACIONES NEUROLOGICAS'), ('E115', 'DIABETES MELLITUS NO INSULINODEPENDIENTE CON COMPLICACIONES CIRCULATORIAS PERIFERICAS'), ('E116', 'DIABETES MELLITUS NO INSULINODEPENDIENTE CON OTRAS COMPLICACIONES ESPECIFICADAS'), ('E117', 'DIABETES MELLITUS NO INSULINODEPENDIENTE CON COMPLICACIONES MULTIPLES'), ('E118', 'DIABETES MELLITUS NO INSULINODEPENDIENTE CON COMPLICACIONES NO ESPECIFICADAS'), ('E119', 'DIABETES MELLITUS NO INSULINODEPENDIENTE SIN MENCION DE COMPLICACION'), ('E12', 'DIABETES MELLITUS ASOCIADA CON DESNUTRICION'), ('E120', 'DIABETES MELLITUS ASOCIADA CON DESNUTRICION CON COMA'), ('E121', 'DIABETES MELLITUS ASOCIADA CON DESNUTRICION CON CETOACIDOSIS'), ('E122', 'DIABETES MELLITUS ASOCIADA CON DESNUTRICION CON COMPLICACIONES RENALES'), ('E123', 'DIABETES MELLITUS ASOCIADA CON DESNUTRICION CON COMPLICACIONES OFTALMICAS'), ('E124', 'DIABETES MELLITUS ASOCIADA CON DESNUTRICION CON COMPLICACIONES NEUROLOGICAS'), ('E125', 'DIABETES MELLITUS ASOCIADA CON DESNUTRICION CON COMPLICACIONES CIRCULATORIAS PERIFERICAS'), ('E126', 'DIABETES MELLITUS ASOCIADA CON DESNUTRICION CON OTRAS COMPLICACIONES ESPECIFICADAS'), ('E127', 'DIABETES MELLITUS ASOCIADA CON DESNUTRICION CON COMPLICACIONES MULTIPLES'), ('E128', 'DIABETES MELLITUS ASOCIADA CON DESNUTRICION CON COMPLICACIONES NO ESPECIFICADAS'), ('E129', 'DIABETES MELLITUS ASOCIADA CON DESNUTRICION SIN MENCION DE COMPLICACION'), ('E13', 'OTRAS DIABETES MELLITUS ESPECIFICADAS'), ('E130', 'DIABETES MELLITUS ESPECIFICADA CON COMA'), ('E131', 'DIABETES MELLITUS ESPECIFICADA CON CETOACIDOSIS'), ('E132', 'DIABETES MELLITUS ESPECIFICADA CON COMPLICACIONES RENALES'), ('E133', 'DIABETES MELLITUS ESPECIFICADA CON COMPLICACIONES OFTALMICAS'), ('E134', 'DIABETES MELLITUS ESPECIFICADA CON COMPLICACIONES NEUROLOGICAS'), ('E135', 'DIABETES MELLITUS ESPECIFICADA CON COMPLICACIONES CIRCULATORIAS PERIFERICAS'), ('E136', 'DIABETES MELLITUS ESPECIFICADA CON OTRAS COMPLICACIONES ESPECIFICADAS'), ('E137', 'DIABETES MELLITUS ESPECIFICADA CON COMPLICACIONES MULTIPLES'), ('E138', 'DIABETES MELLITUS ESPECIFICADA CON COMPLICACIONES NO ESPECIFICADAS'), ('E139', 'DIABETES MELLITUS ESPECIFICADA SIN MENCION DE COMPLICACION'), ('E14', 'DIABETES MELLITUS, NO ESPECIFICADA'), ('E140', 'DIABETES MELLITUS, NO ESPECIFICADA CON COMA'), ('E141', 'DIABETES MELLITUS, NO ESPECIFICADA CON CETOACIDOSIS'), ('E142', 'DIABETES MELLITUS, NO ESPECIFICADA CON COMPLICACIONES RENALES'), ('E143', 'DIABETES MELLITUS, NO ESPECIFICADA CON COMPLICACIONES OFTALMICAS'), ('E144', 'DIABETES MELLITUS, NO ESPECIFICADA CON COMPLICACIONES NEUROLOGICAS'), ('E145', 'DIABETES MELLITUS, NO ESPECIFICADA CON COMPLICACIONES CIRCULATORIAS PERIFERICAS'), ('E146', 'DIABETES MELLITUS, NO ESPECIFICADA CON OTRAS COMPLICACIONES ESPECIFICADAS'), ('E147', 'DIABETES MELLITUS, NO ESPECIFICADA CON COMPLICACIONES MULTIPLES'), ('E148', 'DIABETES MELLITUS, NO ESPECIFICADA CON COMPLICACIONES NO ESPECIFICADAS'), ('E149', 'DIABETES MELLITUS, NO ESPECIFICADA SIN MENCION DE COMPLICACION'), ('O240', 'DIABETES MELLITUS PREEXISTENTE INSULINODEPENDIENTE, EN EL EMBARAZO'), ('O241', 'DIABETES MELLITUS PREEXISTENTE NO INSULINODEPENDIENTE, EN EL EMBARAZO'), ('O242', 'DIABETES MELLITUS PREEXISTENTE RELACIONADA CON DESNUTRICIÓN, EN EL EMBARAZO'), ('O243', 'DIABETES MELLITUS PREEXISTENTE SIN OTRA ESPECIFICACIÓN, EN EL EMBARAZO'), ('R730', 'ANORMALIDADES DE LA PRUEBA DE TOLERANCIA A LA GLUCOSA'), ('E161', 'OTRAS HIPOGLICEMIAS'), ('R739', 'HIPERGLICEMIA, NO ESPECIFICADA'), ('E101', 'DIABETES MELLITUS INSULINODEPENDIENTE, CON CETOACIDOSIS'), ('No se cargo el diagnóstico CIE10', 'No se cargo el diagnóstico CIE10')], default='', max_length=100, verbose_name='Diagnósticos')),
                ('ciudad_asignacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ciudad_asignacion', to='gi.ciudad', verbose_name='Ciudad de asignación')),
                ('ciudad_contacto', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ciudad_contacto', to='gi.ciudad', verbose_name='Ciudad de contacto')),
                ('complicaciones_diagnostico', models.ManyToManyField(blank=True, to='gi.Complicacion', verbose_name='Complicaciones')),
                ('eps', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gi.eps', verbose_name='EPS')),
                ('grupo_gestion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gi.grupogestion', verbose_name='Grupo de gestión')),
            ],
            options={
                'verbose_name': 'Paciente',
                'verbose_name_plural': 'Pacientes',
            },
        ),
        migrations.CreateModel(
            name='Tarea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Recuerde que si el nombre de la tarea es "Servicio / Intervención" se considera de sólo lectura', max_length=100, unique=True, verbose_name='Nombre')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
            ],
            options={
                'verbose_name': 'Parámetros - Tarea',
                'verbose_name_plural': 'Parámetros - Tareas',
                'ordering': ('order', 'nombre'),
            },
        ),
        migrations.CreateModel(
            name='Tratamiento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
            ],
            options={
                'verbose_name': 'Parámetros - Tratamiento',
                'verbose_name_plural': 'Parámetros - Tratamientos',
                'ordering': ('order', 'nombre'),
            },
        ),
        migrations.CreateModel(
            name='VariablesClinicas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tsh', models.FloatField(default=0, verbose_name='TSH')),
                ('alat', models.FloatField(default=0, verbose_name='ALAT')),
                ('glicemia_basal', models.FloatField(default=0, verbose_name='Glicemia basal')),
                ('asat', models.FloatField(default=0, verbose_name='ASAT')),
                ('fecha_albuminuria', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha albuminuria')),
                ('microalbuminuria', models.FloatField(default=0, verbose_name='Albuminuria')),
                ('fecha_creatinina', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha creatinina')),
                ('creatinina', models.FloatField(default=0, verbose_name='Creatinina')),
                ('fecha_hdl', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha HDL')),
                ('hdl', models.FloatField(default=0, verbose_name='HDL')),
                ('ldl', models.FloatField(default=0, verbose_name='LDL')),
                ('fecha_ldl', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha LDL')),
                ('ct', models.FloatField(default=0, verbose_name='Trigliceridos')),
                ('fecha_hemoglobina_glicosilada', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha hemoglobina glicosilada')),
                ('hemoglobina_glicosilada', models.FloatField(default=0, verbose_name='Hemoglobina glicosilada')),
                ('fecha_creatinuria', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha creatinuria')),
                ('relacion_microalbuminuria_creatinuria', models.FloatField(default=0, verbose_name='Relacion microalbuminuria-creatinuria')),
                ('evento_cardiovascular', models.BooleanField(default=False, verbose_name='Evento Cardiovascular')),
                ('tas', models.FloatField(blank=True, null=True, verbose_name='PAS')),
                ('tad', models.FloatField(blank=True, null=True, verbose_name='PAD')),
                ('peso', models.FloatField(blank=True, null=True, verbose_name='Peso')),
                ('glucometria', models.FloatField(blank=True, null=True, verbose_name='Glucometría')),
                ('numero_eventos_hipoglicemia', models.IntegerField(default=0, verbose_name='Número de eventos de hipoglicemia desede el último control')),
                ('fecha_hta', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha')),
                ('fecha_erc', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha')),
                ('fecha_dm', models.DateField(default=django.utils.timezone.now, null=True, verbose_name='Fecha')),
                ('fecha_diag_hipoglicemia', models.DateField(default=None, null=True, verbose_name='Fecha diagnóstico - Hipoglicemia')),
                ('numero_hospitalizaciones', models.IntegerField(default=0, verbose_name='Numero de hospitalizaciones en el mes')),
                ('colesterol_total', models.FloatField(default=0, verbose_name='Colesterol total')),
                ('nivel_riesgo_rcv', models.CharField(default='', editable=False, max_length=100, verbose_name='Nivel de riesgo RCV')),
                ('estatura', models.FloatField(default=0, verbose_name='Estatura')),
                ('estadio', models.CharField(blank=True, default='', editable=False, max_length=100, verbose_name='Estadio enfermedad renal')),
                ('tfg', models.FloatField(default=0, null=True, verbose_name='TFG')),
                ('hba1c', models.FloatField(default=0.0, editable=False, verbose_name='Hemoglobina glicosilada (Último registro)')),
                ('riesgo_cardiovascular', models.FloatField(default=0, null=True, verbose_name='Riesgo Cardiovascular')),
                ('fecha_cargue', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha')),
                ('fk_cargue', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gi.carguebackoffice', verbose_name='Cargue asociado')),
                ('fk_paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.paciente', verbose_name='Paciente')),
            ],
            options={
                'verbose_name': 'Paciente - Variables clinicas',
                'verbose_name_plural': 'Paciente - Variables clinicas',
                'ordering': ('-fecha_cargue',),
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('todos_grupos_gestion', models.BooleanField(default=False, verbose_name='¿Tiene todos los grupos de gestión?')),
                ('fk_user_django', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario en el sistema')),
                ('grupos_gestion', models.ManyToManyField(blank=True, to='gi.GrupoGestion', verbose_name='Grupos de gestión')),
            ],
            options={
                'verbose_name': 'Usuario Plataforma',
                'verbose_name_plural': 'Usuarios Plataforma',
                'ordering': ('fk_user_django__username',),
            },
        ),
        migrations.CreateModel(
            name='TratamientoHistorico',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField(default=False)),
                ('date_change', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha en la que se realiza un cambio en el tratamiento del paciente')),
                ('fk_paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.paciente', verbose_name='Paciente')),
                ('fk_tratamiento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.tratamiento', verbose_name='Tratamiento que recibe el paciente')),
            ],
        ),
        migrations.CreateModel(
            name='ServicioTarea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(choices=[('Pruebas', 'Pruebas'), ('Placeholder', 'Placeholder')], max_length=100, verbose_name='Nombre')),
                ('cantidad', models.PositiveIntegerField(verbose_name='Cantidad')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
                ('fk_tarea', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.tarea', verbose_name='Tarea')),
            ],
            options={
                'verbose_name': 'Parámetros - Servicio',
                'verbose_name_plural': 'Parámetros - Servicios',
                'ordering': ('order', 'nombre'),
                'unique_together': {('fk_tarea_id', 'nombre')},
            },
        ),
        migrations.AddField(
            model_name='paciente',
            name='tratamientos',
            field=models.ManyToManyField(blank=True, to='gi.Tratamiento', verbose_name='Tratamientos'),
        ),
        migrations.CreateModel(
            name='MetaPaciente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('Peso', 'Peso'), ('Hemoglobina glicosilada', 'Hemoglobina glicosilada'), ('Presión arterial sistólica', 'Presión arterial sistólica'), ('Presión arterial diastólica', 'Presión arterial diastólica'), ('Microalbuminuria', 'Microalbuminuria')], max_length=100, verbose_name='tipo')),
                ('meta', models.FloatField(default=0, verbose_name='Meta')),
                ('fecha_inicio', models.DateField(verbose_name='Fecha inicio')),
                ('fecha_fin', models.DateField(verbose_name='Fecha fin')),
                ('fk_paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.paciente', verbose_name='Paciente')),
            ],
            options={
                'verbose_name': 'Paciente - Meta',
                'verbose_name_plural': 'Paciente - Metas',
                'ordering': ('fecha_inicio', 'fecha_fin'),
            },
        ),
        migrations.CreateModel(
            name='Logs_cargue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_fila', models.IntegerField(default=0, verbose_name='Número de fila')),
                ('numero_documento', models.CharField(default='', max_length=100, verbose_name='Número de documento')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('modified', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Actualización')),
                ('nombre_archivo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.carguebackoffice', verbose_name='Usuario')),
                ('user', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
        ),
        migrations.CreateModel(
            name='IndicadorSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.IntegerField(verbose_name='Més')),
                ('year', models.IntegerField(verbose_name='Año')),
                ('value', models.FloatField(verbose_name='Valor')),
                ('fk_grupo_gestion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gi.grupogestion', verbose_name='Grupo Gestión')),
                ('fk_indicador', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='gi.indicador', verbose_name='Indicador')),
            ],
            options={
                'verbose_name': 'Historico mensual indicador',
                'verbose_name_plural': 'Historicos mensuales indicador',
            },
        ),
        migrations.CreateModel(
            name='HospitalizacionPaciente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnostico_cie', models.CharField(blank=True, default='', max_length=100, verbose_name='Diagnóstico CIE asociado')),
                ('tipo', models.CharField(choices=[('Hospitalización', 'Hospitalización'), ('Urgencias', 'Urgencias'), ('Fallecimiento', 'Fallecimiento')], max_length=100, verbose_name='Tipo')),
                ('era_evitable', models.BooleanField(default=False, verbose_name='¿Era evitable?')),
                ('relacionado_con_diabetes', models.BooleanField(default=False, verbose_name='¿Relacionado con diabetes?')),
                ('observaciones', models.TextField(blank=True, default='', verbose_name='Observaciones')),
                ('tiene_soporte', models.BooleanField(default=False, verbose_name='¿Tiene soporte?')),
                ('fecha', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha')),
                ('fk_cargue', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gi.carguebackoffice', verbose_name='Cargue asociado')),
                ('fk_paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.paciente', verbose_name='Paciente')),
            ],
            options={
                'verbose_name': 'Paciente - Hospitalización',
                'verbose_name_plural': 'Paciente - Hospitalizaciones',
                'ordering': ('-fecha',),
            },
        ),
        migrations.CreateModel(
            name='GrupoPacientes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('slug', models.CharField(default='', max_length=100, verbose_name='Slug')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
                ('pacientes', models.ManyToManyField(blank=True, to='gi.Paciente', verbose_name='Pacientes')),
                ('servicios_tarea', models.ManyToManyField(blank=True, to='gi.ServicioTarea', verbose_name='Servicios')),
            ],
            options={
                'verbose_name': 'Parámetros - Grupo de pacientes',
                'verbose_name_plural': 'Parámetros - Grupos de pacientes',
                'ordering': ('order', 'nombre'),
            },
        ),
        migrations.CreateModel(
            name='ExamenPaciente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tsh', models.FloatField(default=0, verbose_name='TSH')),
                ('alat', models.FloatField(default=0, verbose_name='ALAT')),
                ('glicemia_basal', models.FloatField(default=0, verbose_name='Glicemia basal')),
                ('asat', models.FloatField(default=0, verbose_name='ASAT')),
                ('microalbuminuria', models.FloatField(default=0, verbose_name='Albuminuria')),
                ('creatinina', models.FloatField(default=0, verbose_name='Creatinina')),
                ('hdl', models.FloatField(default=0, verbose_name='HDL')),
                ('ldl', models.FloatField(default=0, verbose_name='LDL')),
                ('colesterol_total', models.FloatField(default=0, verbose_name='Colesterol total')),
                ('ct', models.FloatField(default=0, verbose_name='Trigliceridos')),
                ('hemoglobina_glicosilada', models.FloatField(default=0, verbose_name='Hemoglobina glicosilada')),
                ('fecha', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha')),
                ('fk_cargue', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gi.carguebackoffice', verbose_name='Cargue asociado')),
                ('fk_paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.paciente', verbose_name='Paciente')),
            ],
            options={
                'verbose_name': 'Paciente - Examen',
                'verbose_name_plural': 'Paciente - Examenes',
                'ordering': ('-fecha',),
            },
        ),
        migrations.CreateModel(
            name='Error_cargue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('columna', models.CharField(default='', max_length=100, verbose_name='Columna')),
                ('mensaje_error', models.CharField(default='', max_length=250, verbose_name='Mensaje de error')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('modified', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Actualización')),
                ('logs_cargue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.logs_cargue', verbose_name='Logs Cargue')),
            ],
        ),
        migrations.CreateModel(
            name='ControlPaciente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('Hospitalización', 'Hospitalización'), ('Urgencias', 'Urgencias'), ('Fallecimiento', 'Fallecimiento')], max_length=100, verbose_name='Tipo')),
                ('tas', models.FloatField(blank=True, null=True, verbose_name='PAS')),
                ('tad', models.FloatField(blank=True, null=True, verbose_name='PAD')),
                ('peso', models.FloatField(blank=True, null=True, verbose_name='Peso')),
                ('glucometria', models.FloatField(blank=True, null=True, verbose_name='Glucometría')),
                ('numero_eventos_hipoglicemia', models.IntegerField(default=0, verbose_name='Número de eventos de hipoglicemia desede el último control')),
                ('observaciones', models.TextField(blank=True, default='', verbose_name='Observaciones')),
                ('tiene_soporte', models.BooleanField(default=False, verbose_name='¿Tiene soporte?')),
                ('fecha', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha')),
                ('fk_cargue', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gi.carguebackoffice', verbose_name='Cargue asociado')),
                ('fk_paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.paciente', verbose_name='Paciente')),
            ],
            options={
                'verbose_name': 'Paciente - Control',
                'verbose_name_plural': 'Paciente - Controles',
                'ordering': ('-fecha',),
            },
        ),
        migrations.AlterUniqueTogether(
            name='paciente',
            unique_together={('tipo_documento', 'numero_documento')},
        ),
        migrations.CreateModel(
            name='MedicacionPaciente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dosis_mg', models.FloatField(default=0, verbose_name='Dosis')),
                ('fecha_formulacion', models.DateField(verbose_name='Fecha de formulación')),
                ('tiempo_formulacion_meses', models.PositiveIntegerField(verbose_name='Tiempo de formulación')),
                ('fk_medicacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.medicacion', verbose_name='Medicación')),
                ('fk_paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gi.paciente', verbose_name='Paciente')),
            ],
            options={
                'verbose_name': 'Paciente - Medicación',
                'verbose_name_plural': 'Paciente - Medicaciones',
                'unique_together': {('fk_paciente_id', 'fk_medicacion_id')},
            },
        ),
    ]
